// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: food.sql

package db

import (
	"context"
)

const createFood = `-- name: CreateFood :one
INSERT INTO food (
  name, area, food_type, webaddress
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, area, food_type, webaddress
`

type CreateFoodParams struct {
	Name       string `db:"name"`
	Area       int64  `db:"area"`
	FoodType   int64  `db:"food_type"`
	Webaddress string `db:"webaddress"`
}

// input: name, area, food_type, webaddress
// output :one
func (q *Queries) CreateFood(ctx context.Context, arg CreateFoodParams) (Food, error) {
	row := q.db.QueryRowContext(ctx, createFood,
		arg.Name,
		arg.Area,
		arg.FoodType,
		arg.Webaddress,
	)
	var i Food
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Area,
		&i.FoodType,
		&i.Webaddress,
	)
	return i, err
}

const deleteFood = `-- name: DeleteFood :exec
DELETE FROM food
WHERE id = $1
`

func (q *Queries) DeleteFood(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFood, id)
	return err
}

const getFood = `-- name: GetFood :one
SELECT id, name, area, food_type, webaddress FROM food
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFood(ctx context.Context, id int64) (Food, error) {
	row := q.db.QueryRowContext(ctx, getFood, id)
	var i Food
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Area,
		&i.FoodType,
		&i.Webaddress,
	)
	return i, err
}

const getfoodByLocation = `-- name: GetfoodByLocation :many
SELECT id, name, area, food_type, webaddress FROM food
WHERE area= $1
`

func (q *Queries) GetfoodByLocation(ctx context.Context, area int64) ([]Food, error) {
	rows, err := q.db.QueryContext(ctx, getfoodByLocation, area)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Food{}
	for rows.Next() {
		var i Food
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Area,
			&i.FoodType,
			&i.Webaddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listfood = `-- name: Listfood :many
SELECT id, name, area, food_type, webaddress FROM food
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListfoodParams struct {
	Limit  int32 `db:"limit"`
	Offset int32 `db:"offset"`
}

func (q *Queries) Listfood(ctx context.Context, arg ListfoodParams) ([]Food, error) {
	rows, err := q.db.QueryContext(ctx, listfood, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Food{}
	for rows.Next() {
		var i Food
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Area,
			&i.FoodType,
			&i.Webaddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFood = `-- name: UpdateFood :one
UPDATE food
  set name = $2,
 area   = $3,
 food_type = $4,
 webaddress = $5
WHERE id = $1
RETURNING id, name, area, food_type, webaddress
`

type UpdateFoodParams struct {
	ID         int64  `db:"id"`
	Name       string `db:"name"`
	Area       int64  `db:"area"`
	FoodType   int64  `db:"food_type"`
	Webaddress string `db:"webaddress"`
}

func (q *Queries) UpdateFood(ctx context.Context, arg UpdateFoodParams) (Food, error) {
	row := q.db.QueryRowContext(ctx, updateFood,
		arg.ID,
		arg.Name,
		arg.Area,
		arg.FoodType,
		arg.Webaddress,
	)
	var i Food
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Area,
		&i.FoodType,
		&i.Webaddress,
	)
	return i, err
}
