// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: activity.sql

package db

import (
	"context"
)

const createActivity = `-- name: CreateActivity :one
INSERT INTO Activity (
activity_name,activity_type,description,webaddress,time_allocated,area
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, activity_name, activity_type, description, webaddress, time_allocated, area
`

type CreateActivityParams struct {
	ActivityName  string `db:"activity_name"`
	ActivityType  int64  `db:"activity_type"`
	Description   string `db:"description"`
	Webaddress    string `db:"webaddress"`
	TimeAllocated int64  `db:"time_allocated"`
	Area          int64  `db:"area"`
}

// input: activity_name, activity_type, description, webaddress, time_allocated, area
// output :one
func (q *Queries) CreateActivity(ctx context.Context, arg CreateActivityParams) (Activity, error) {
	row := q.db.QueryRowContext(ctx, createActivity,
		arg.ActivityName,
		arg.ActivityType,
		arg.Description,
		arg.Webaddress,
		arg.TimeAllocated,
		arg.Area,
	)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.ActivityName,
		&i.ActivityType,
		&i.Description,
		&i.Webaddress,
		&i.TimeAllocated,
		&i.Area,
	)
	return i, err
}

const deleteActivity = `-- name: DeleteActivity :exec
DELETE FROM Activity
WHERE id = $1
`

func (q *Queries) DeleteActivity(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteActivity, id)
	return err
}

const getActivity = `-- name: GetActivity :one
SELECT id, activity_name, activity_type, description, webaddress, time_allocated, area FROM Activity
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetActivity(ctx context.Context, id int64) (Activity, error) {
	row := q.db.QueryRowContext(ctx, getActivity, id)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.ActivityName,
		&i.ActivityType,
		&i.Description,
		&i.Webaddress,
		&i.TimeAllocated,
		&i.Area,
	)
	return i, err
}

const getActivityByLocation = `-- name: GetActivityByLocation :many
SELECT id, activity_name, activity_type, description, webaddress, time_allocated, area FROM Activity
WHERE area= $1
`

func (q *Queries) GetActivityByLocation(ctx context.Context, area int64) ([]Activity, error) {
	rows, err := q.db.QueryContext(ctx, getActivityByLocation, area)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Activity{}
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.ActivityName,
			&i.ActivityType,
			&i.Description,
			&i.Webaddress,
			&i.TimeAllocated,
			&i.Area,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActivity = `-- name: ListActivity :many
SELECT id, activity_name, activity_type, description, webaddress, time_allocated, area FROM Activity
ORDER BY activity_name 
LIMIT $1
OFFSET $2
`

type ListActivityParams struct {
	Limit  int32 `db:"limit"`
	Offset int32 `db:"offset"`
}

func (q *Queries) ListActivity(ctx context.Context, arg ListActivityParams) ([]Activity, error) {
	rows, err := q.db.QueryContext(ctx, listActivity, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Activity{}
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.ActivityName,
			&i.ActivityType,
			&i.Description,
			&i.Webaddress,
			&i.TimeAllocated,
			&i.Area,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateActivity = `-- name: UpdateActivity :one
UPDATE Activity
  set activity_name = $2,
  activity_type = $3,
  description = $4,
  webaddress = $5,
  time_allocated = $6,
  area = $7
WHERE id = $1
RETURNING id, activity_name, activity_type, description, webaddress, time_allocated, area
`

type UpdateActivityParams struct {
	ID            int64  `db:"id"`
	ActivityName  string `db:"activity_name"`
	ActivityType  int64  `db:"activity_type"`
	Description   string `db:"description"`
	Webaddress    string `db:"webaddress"`
	TimeAllocated int64  `db:"time_allocated"`
	Area          int64  `db:"area"`
}

func (q *Queries) UpdateActivity(ctx context.Context, arg UpdateActivityParams) (Activity, error) {
	row := q.db.QueryRowContext(ctx, updateActivity,
		arg.ID,
		arg.ActivityName,
		arg.ActivityType,
		arg.Description,
		arg.Webaddress,
		arg.TimeAllocated,
		arg.Area,
	)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.ActivityName,
		&i.ActivityType,
		&i.Description,
		&i.Webaddress,
		&i.TimeAllocated,
		&i.Area,
	)
	return i, err
}
