// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: activity_type.sql

package db

import (
	"context"
)

const createactivity_type = `-- name: Createactivity_type :one
INSERT INTO activity_type (
  name 
) VALUES (
  $1 
)
RETURNING id, name
`

// input: name
// output :one
func (q *Queries) Createactivity_type(ctx context.Context, name string) (ActivityType, error) {
	row := q.db.QueryRowContext(ctx, createactivity_type, name)
	var i ActivityType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteactivity_type = `-- name: Deleteactivity_type :exec
DELETE FROM activity_type
WHERE id = $1
`

func (q *Queries) Deleteactivity_type(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteactivity_type, id)
	return err
}

const getactivity_type = `-- name: Getactivity_type :one
SELECT id, name FROM activity_type
WHERE id = $1 LIMIT 1
`

func (q *Queries) Getactivity_type(ctx context.Context, id int64) (ActivityType, error) {
	row := q.db.QueryRowContext(ctx, getactivity_type, id)
	var i ActivityType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listactivity_types = `-- name: Listactivity_types :many
SELECT id, name FROM activity_type
ORDER BY name
LIMIT $1
OFFSET $2
`

type Listactivity_typesParams struct {
	Limit  int32 `db:"limit"`
	Offset int32 `db:"offset"`
}

func (q *Queries) Listactivity_types(ctx context.Context, arg Listactivity_typesParams) ([]ActivityType, error) {
	rows, err := q.db.QueryContext(ctx, listactivity_types, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ActivityType{}
	for rows.Next() {
		var i ActivityType
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateactivity_type = `-- name: Updateactivity_type :one
UPDATE activity_type
  set name = $2
WHERE id = $1
RETURNING id, name
`

type Updateactivity_typeParams struct {
	ID   int64  `db:"id"`
	Name string `db:"name"`
}

func (q *Queries) Updateactivity_type(ctx context.Context, arg Updateactivity_typeParams) (ActivityType, error) {
	row := q.db.QueryRowContext(ctx, updateactivity_type, arg.ID, arg.Name)
	var i ActivityType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
