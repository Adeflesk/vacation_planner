// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: location.sql

package db

import (
	"context"
)

const createLocation = `-- name: CreateLocation :one
INSERT INTO locations (
  location_name, location_description, country_id
) VALUES (
  $1, $2, $3
)
RETURNING id, location_name, location_description, country_id
`

type CreateLocationParams struct {
	LocationName        string `db:"location_name"`
	LocationDescription string `db:"location_description"`
	CountryID           int64  `db:"country_id"`
}

// input: location_name, location_description, country_id
// output :one
func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, createLocation, arg.LocationName, arg.LocationDescription, arg.CountryID)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.LocationName,
		&i.LocationDescription,
		&i.CountryID,
	)
	return i, err
}

const deleteLocation = `-- name: DeleteLocation :exec
DELETE FROM locations
WHERE id = $1
`

func (q *Queries) DeleteLocation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLocation, id)
	return err
}

const getLocation = `-- name: GetLocation :one
SELECT id, location_name, location_description, country_id FROM locations
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLocation(ctx context.Context, id int64) (Location, error) {
	row := q.db.QueryRowContext(ctx, getLocation, id)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.LocationName,
		&i.LocationDescription,
		&i.CountryID,
	)
	return i, err
}

const getLocationsByCountry = `-- name: GetLocationsByCountry :many
SELECT id, location_name, location_description, country_id FROM locations
WHERE country_id = $1
`

func (q *Queries) GetLocationsByCountry(ctx context.Context, countryID int64) ([]Location, error) {
	rows, err := q.db.QueryContext(ctx, getLocationsByCountry, countryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Location{}
	for rows.Next() {
		var i Location
		if err := rows.Scan(
			&i.ID,
			&i.LocationName,
			&i.LocationDescription,
			&i.CountryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLocations = `-- name: ListLocations :many
SELECT id, location_name, location_description, country_id FROM locations
ORDER BY location_name
LIMIT $1
OFFSET $2
`

type ListLocationsParams struct {
	Limit  int32 `db:"limit"`
	Offset int32 `db:"offset"`
}

func (q *Queries) ListLocations(ctx context.Context, arg ListLocationsParams) ([]Location, error) {
	rows, err := q.db.QueryContext(ctx, listLocations, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Location{}
	for rows.Next() {
		var i Location
		if err := rows.Scan(
			&i.ID,
			&i.LocationName,
			&i.LocationDescription,
			&i.CountryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLocation = `-- name: UpdateLocation :one
UPDATE locations
  set location_name = $2,
 location_description = $3,
 country_id = $4
WHERE id = $1
RETURNING id, location_name, location_description, country_id
`

type UpdateLocationParams struct {
	ID                  int64  `db:"id"`
	LocationName        string `db:"location_name"`
	LocationDescription string `db:"location_description"`
	CountryID           int64  `db:"country_id"`
}

func (q *Queries) UpdateLocation(ctx context.Context, arg UpdateLocationParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, updateLocation,
		arg.ID,
		arg.LocationName,
		arg.LocationDescription,
		arg.CountryID,
	)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.LocationName,
		&i.LocationDescription,
		&i.CountryID,
	)
	return i, err
}
