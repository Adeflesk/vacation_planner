// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: food_type.sql

package db

import (
	"context"
)

const createfood_type = `-- name: Createfood_type :one
INSERT INTO food_type (
  type 
) VALUES (
  $1 
)
RETURNING id, type
`

// input: type
// output :one
func (q *Queries) Createfood_type(ctx context.Context, type_ string) (FoodType, error) {
	row := q.db.QueryRowContext(ctx, createfood_type, type_)
	var i FoodType
	err := row.Scan(&i.ID, &i.Type)
	return i, err
}

const deletefood_type = `-- name: Deletefood_type :exec
DELETE FROM food_type
WHERE id = $1
`

func (q *Queries) Deletefood_type(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletefood_type, id)
	return err
}

const getfood_type = `-- name: Getfood_type :one
SELECT id, type FROM food_type
WHERE id = $1 LIMIT 1
`

func (q *Queries) Getfood_type(ctx context.Context, id int64) (FoodType, error) {
	row := q.db.QueryRowContext(ctx, getfood_type, id)
	var i FoodType
	err := row.Scan(&i.ID, &i.Type)
	return i, err
}

const listfood_types = `-- name: Listfood_types :many
SELECT id, type FROM food_type
ORDER BY type
LIMIT $1
OFFSET $2
`

type Listfood_typesParams struct {
	Limit  int32 `db:"limit"`
	Offset int32 `db:"offset"`
}

func (q *Queries) Listfood_types(ctx context.Context, arg Listfood_typesParams) ([]FoodType, error) {
	rows, err := q.db.QueryContext(ctx, listfood_types, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FoodType{}
	for rows.Next() {
		var i FoodType
		if err := rows.Scan(&i.ID, &i.Type); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatefood_type = `-- name: Updatefood_type :one
UPDATE food_type
  set type = $2
WHERE id = $1
RETURNING id, type
`

type Updatefood_typeParams struct {
	ID   int64  `db:"id"`
	Type string `db:"type"`
}

func (q *Queries) Updatefood_type(ctx context.Context, arg Updatefood_typeParams) (FoodType, error) {
	row := q.db.QueryRowContext(ctx, updatefood_type, arg.ID, arg.Type)
	var i FoodType
	err := row.Scan(&i.ID, &i.Type)
	return i, err
}
